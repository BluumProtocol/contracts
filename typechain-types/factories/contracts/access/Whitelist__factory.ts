/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Whitelist,
  WhitelistInterface,
} from "../../../contracts/access/Whitelist";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAccessManager",
        name: "_accessManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "OnlyAdminCanCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddedToWhitelist",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "RemovedFromWhitelist",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isWhitelistRequired",
        type: "bool",
      },
    ],
    name: "WhitelistRequired",
    type: "event",
  },
  {
    inputs: [],
    name: "accessManager",
    outputs: [
      {
        internalType: "contract IAccessManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "_collection",
        type: "address",
      },
    ],
    name: "addToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isWhitelistRequired",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "address",
        name: "_collection",
        type: "address",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "_isWhitelisted",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "_collection",
        type: "address",
      },
    ],
    name: "removeFromWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_collection",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_isWhitelistRequired",
        type: "bool",
      },
    ],
    name: "setWhitelistRequired",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405162000e4638038062000e46833981810160405281019061003491906100ef565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100aa8261007f565b9050919050565b60006100bc8261009f565b9050919050565b6100cc816100b1565b81146100d757600080fd5b50565b6000815190506100e9816100c3565b92915050565b6000602082840312156101055761010461007a565b5b6000610113848285016100da565b91505092915050565b610d1a806200012c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632713d18714610067578063377c8fc81461009757806382f402d8146100b3578063894e037f146100cf578063b6b35272146100eb578063fdcb60681461011b575b600080fd5b610081600480360381019061007c9190610938565b610139565b60405161008e9190610980565b60405180910390f35b6100b160048036038101906100ac91906109c7565b610159565b005b6100cd60048036038101906100c89190610a6c565b6102ff565b005b6100e960048036038101906100e49190610a6c565b61055d565b005b61010560048036038101906101009190610acc565b6107bc565b6040516101129190610980565b60405180910390f35b6101236108ac565b6040516101309190610b6b565b60405180910390f35b60026020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336040518363ffffffff1660e01b81526004016101d4929190610bae565b602060405180830381865afa1580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102159190610bec565b61025657336040517fa3a27afc00000000000000000000000000000000000000000000000000000000815260040161024d9190610c19565b60405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f5155ecb9a80fdffef478d4ced2b93f37a6bdde4e8fe186c786f10cce5d0fc5f0826040516102f39190610980565b60405180910390a25050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336040518363ffffffff1660e01b815260040161037a929190610bae565b602060405180830381865afa158015610397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bb9190610bec565b6103fc57336040517fa3a27afc0000000000000000000000000000000000000000000000000000000081526004016103f39190610c19565b60405180910390fd5b60005b838390508110156105575760018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086868581811061045f5761045e610c34565b5b90506020020160208101906104749190610938565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508383828181106104d8576104d7610c34565b5b90506020020160208101906104ed9190610938565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f0c4b48e75a1f7ab0a9a2f786b5d6c1f7789020403bff177fb54d46edb89ccc0060405160405180910390a38061055090610c9c565b90506103ff565b50505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336040518363ffffffff1660e01b81526004016105d8929190610bae565b602060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190610bec565b61065a57336040517fa3a27afc0000000000000000000000000000000000000000000000000000000081526004016106519190610c19565b60405180910390fd5b60005b838390508110156107b6576000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008686858181106106be576106bd610c34565b5b90506020020160208101906106d39190610938565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555083838281811061073757610736610c34565b5b905060200201602081019061074c9190610938565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fd288ab5da2e1f37cf384a1565a3f905ad289b092fbdd31950dbbfef148c04f8860405160405180910390a3806107af90610c9c565b905061065d565b50505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156108a157600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506108a6565b600190505b92915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610905826108da565b9050919050565b610915816108fa565b811461092057600080fd5b50565b6000813590506109328161090c565b92915050565b60006020828403121561094e5761094d6108d0565b5b600061095c84828501610923565b91505092915050565b60008115159050919050565b61097a81610965565b82525050565b60006020820190506109956000830184610971565b92915050565b6109a481610965565b81146109af57600080fd5b50565b6000813590506109c18161099b565b92915050565b600080604083850312156109de576109dd6108d0565b5b60006109ec85828601610923565b92505060206109fd858286016109b2565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112610a2c57610a2b610a07565b5b8235905067ffffffffffffffff811115610a4957610a48610a0c565b5b602083019150836020820283011115610a6557610a64610a11565b5b9250929050565b600080600060408486031215610a8557610a846108d0565b5b600084013567ffffffffffffffff811115610aa357610aa26108d5565b5b610aaf86828701610a16565b93509350506020610ac286828701610923565b9150509250925092565b60008060408385031215610ae357610ae26108d0565b5b6000610af185828601610923565b9250506020610b0285828601610923565b9150509250929050565b6000819050919050565b6000610b31610b2c610b27846108da565b610b0c565b6108da565b9050919050565b6000610b4382610b16565b9050919050565b6000610b5582610b38565b9050919050565b610b6581610b4a565b82525050565b6000602082019050610b806000830184610b5c565b92915050565b6000819050919050565b610b9981610b86565b82525050565b610ba8816108fa565b82525050565b6000604082019050610bc36000830185610b90565b610bd06020830184610b9f565b9392505050565b600081519050610be68161099b565b92915050565b600060208284031215610c0257610c016108d0565b5b6000610c1084828501610bd7565b91505092915050565b6000602082019050610c2e6000830184610b9f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610ca782610c92565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cd957610cd8610c63565b5b60018201905091905056fea2646970667358221220806c0f9b1a79f1dbaf2a63a34226e83923fabf8f03a42e8f0aec86afa1e97b3964736f6c63430008120033";

type WhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Whitelist__factory extends ContractFactory {
  constructor(...args: WhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _accessManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Whitelist> {
    return super.deploy(_accessManager, overrides || {}) as Promise<Whitelist>;
  }
  override getDeployTransaction(
    _accessManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_accessManager, overrides || {});
  }
  override attach(address: string): Whitelist {
    return super.attach(address) as Whitelist;
  }
  override connect(signer: Signer): Whitelist__factory {
    return super.connect(signer) as Whitelist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WhitelistInterface {
    return new utils.Interface(_abi) as WhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Whitelist {
    return new Contract(address, _abi, signerOrProvider) as Whitelist;
  }
}
