/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface WhitelistInterface extends utils.Interface {
  functions: {
    "accessManager()": FunctionFragment;
    "addToWhitelist(address[],address)": FunctionFragment;
    "isWhitelistRequired(address)": FunctionFragment;
    "isWhitelisted(address,address)": FunctionFragment;
    "removeFromWhitelist(address[],address)": FunctionFragment;
    "setWhitelistRequired(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accessManager"
      | "addToWhitelist"
      | "isWhitelistRequired"
      | "isWhitelisted"
      | "removeFromWhitelist"
      | "setWhitelistRequired"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accessManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistRequired",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistRequired",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "accessManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistRequired",
    data: BytesLike
  ): Result;

  events: {
    "AddedToWhitelist(address,address)": EventFragment;
    "RemovedFromWhitelist(address,address)": EventFragment;
    "WhitelistRequired(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistRequired"): EventFragment;
}

export interface AddedToWhitelistEventObject {
  collection: string;
  account: string;
}
export type AddedToWhitelistEvent = TypedEvent<
  [string, string],
  AddedToWhitelistEventObject
>;

export type AddedToWhitelistEventFilter =
  TypedEventFilter<AddedToWhitelistEvent>;

export interface RemovedFromWhitelistEventObject {
  collection: string;
  account: string;
}
export type RemovedFromWhitelistEvent = TypedEvent<
  [string, string],
  RemovedFromWhitelistEventObject
>;

export type RemovedFromWhitelistEventFilter =
  TypedEventFilter<RemovedFromWhitelistEvent>;

export interface WhitelistRequiredEventObject {
  collection: string;
  isWhitelistRequired: boolean;
}
export type WhitelistRequiredEvent = TypedEvent<
  [string, boolean],
  WhitelistRequiredEventObject
>;

export type WhitelistRequiredEventFilter =
  TypedEventFilter<WhitelistRequiredEvent>;

export interface Whitelist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WhitelistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accessManager(overrides?: CallOverrides): Promise<[string]>;

    addToWhitelist(
      _addresses: PromiseOrValue<string>[],
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isWhitelistRequired(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelisted(
      _address: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isWhitelisted: boolean }>;

    removeFromWhitelist(
      _addresses: PromiseOrValue<string>[],
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWhitelistRequired(
      _collection: PromiseOrValue<string>,
      _isWhitelistRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accessManager(overrides?: CallOverrides): Promise<string>;

  addToWhitelist(
    _addresses: PromiseOrValue<string>[],
    _collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isWhitelistRequired(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelisted(
    _address: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeFromWhitelist(
    _addresses: PromiseOrValue<string>[],
    _collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWhitelistRequired(
    _collection: PromiseOrValue<string>,
    _isWhitelistRequired: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accessManager(overrides?: CallOverrides): Promise<string>;

    addToWhitelist(
      _addresses: PromiseOrValue<string>[],
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isWhitelistRequired(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelisted(
      _address: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeFromWhitelist(
      _addresses: PromiseOrValue<string>[],
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistRequired(
      _collection: PromiseOrValue<string>,
      _isWhitelistRequired: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedToWhitelist(address,address)"(
      collection?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): AddedToWhitelistEventFilter;
    AddedToWhitelist(
      collection?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): AddedToWhitelistEventFilter;

    "RemovedFromWhitelist(address,address)"(
      collection?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): RemovedFromWhitelistEventFilter;
    RemovedFromWhitelist(
      collection?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): RemovedFromWhitelistEventFilter;

    "WhitelistRequired(address,bool)"(
      collection?: PromiseOrValue<string> | null,
      isWhitelistRequired?: null
    ): WhitelistRequiredEventFilter;
    WhitelistRequired(
      collection?: PromiseOrValue<string> | null,
      isWhitelistRequired?: null
    ): WhitelistRequiredEventFilter;
  };

  estimateGas: {
    accessManager(overrides?: CallOverrides): Promise<BigNumber>;

    addToWhitelist(
      _addresses: PromiseOrValue<string>[],
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isWhitelistRequired(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelisted(
      _address: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFromWhitelist(
      _addresses: PromiseOrValue<string>[],
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWhitelistRequired(
      _collection: PromiseOrValue<string>,
      _isWhitelistRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accessManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToWhitelist(
      _addresses: PromiseOrValue<string>[],
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isWhitelistRequired(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      _address: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      _addresses: PromiseOrValue<string>[],
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistRequired(
      _collection: PromiseOrValue<string>,
      _isWhitelistRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
